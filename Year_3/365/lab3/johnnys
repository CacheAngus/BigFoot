# Jonathan Stroz
# Lab 3 - Algorithms
# October 3rd 2018
from functools import reduce
import random
from math import sqrt
from numpy.random import normal
import matplotlib.pyplot as plt


fig = plt.subplot(111)
fig.set_title("Convex Hulls")
fig.set_ylabel("Y")
fig.set_xlabel("X")


def convex_hull_graham(points):
    TURN_LEFT, TURN_RIGHT, TURN_NONE = (1, -1, 0)

    def cmp(a, b):
        return (a > b) - (a < b)

    def turn(p, q, r):
        return cmp((q[0] - p[0]) * (r[1] - p[1]) - (r[0] - p[0]) * (q[1] - p[1]), 0)

    def _keep_left(hull, r):
        while len(hull) > 1 and turn(hull[-2], hull[-1], r) != TURN_LEFT:
            hull.pop()
        if not len(hull) or hull[-1] != r:
            hull.append(r)
        return hull

    points = sorted(points)
    l = reduce(_keep_left, points, [])
    u = reduce(_keep_left, reversed(points), [])
    return l.extend(u[i] for i in range(1, len(u) - 1)) or l


def get_hull_length(points):
    return points.length()


def get_hull_center(points, offset):
    # get most left point
    leftmost = points[0][0]
    rightmost = points[0][0]
    highest = points[0][1]
    lowest = points[0][1]

    # get most right,left points
    # get highest and lowest points
    for i in range(0, len(points) - 1):
        if (points[i][0] < leftmost):
            leftmost = points[i][0]

        if (points[i][0] > rightmost):
            rightmost = points[i][0]

        if (points[i][1] < lowest):
            lowest = points[i][1]

        if (points[i][1] > highest):
            highest = points[i][1]

    # calcuate center and find total circumference
    center = (leftmost / rightmost) + offset, (highest / lowest) + offset
    maxdist = 0
    dist = 0
    for i in range(0, len(points) - 1):
        dist = sqrt((points[i][0] - center[0]) * 2 + (points[i][1] - center[1]) * 2)
        if dist > maxdist:
            maxdist = dist

    # return circule start and area
    return center, maxdist


def connect(x, y, point1, point2, type):
    x1, x2 = x[point1], x[point2]
    y1, y2 = y[point1], y[point2]
    plt.plot([x1, x2], [y1, y2], type)


def if_circles_intersect(circle_one, circle_two):
    center_dist = sqrt((circle_one[0][0] - circle_two[0][0]) * 2 + (circle_one[0][1] - circle_two[0][1]) * 2)

    radi_dist = circle_one[1] + circle_two[1]
    if center_dist < radi_dist:
        return "intersect"

    return "do not intersect"

# simulate 20 points in x,y coordinates
convex_hull_emp = []
convex_hull_gaus = []

gaus_offset = 0
intersection_offset = 140

emp_x = []
emp_y = []

gaus_x = []
gaus_y = []

inter_x = []
inter_y = []

points_gaus = []
points_emp = []
points_intersecting = []

for i in range(0, 50):
    # emperical
    emp_x = random.randint(-100, 100)
    emp_y = random.randint(-100, 100)

    data_emp = [emp_x, emp_y]
    plt.plot(emp_x, emp_y, 'go')
    points_emp.append(data_emp)

        # normal
    gaus_x = normal(gaus_offset, 20)
    gaus_y = normal(gaus_offset, 20)

    data_gaus = [gaus_x, gaus_y]
    plt.plot(gaus_x, gaus_y, 'ro')
    points_gaus.append(data_gaus)

    # intersecting
    inter_x = normal(intersection_offset, 20)
    inter_y = normal(intersection_offset, 20)

    data_inter = [inter_x, inter_y]
    plt.plot(inter_x, inter_y, 'mo')
    points_intersecting.append(data_inter)

    # Empirical Convex Hull and Plotting
hull_emp = convex_hull_graham(points_emp)
hull_x_emp = []
hull_y_emp = []

for pair in hull_emp:
    hull_x_emp.append(pair[0])
    hull_y_emp.append(pair[1])

for i in range(0, len(hull_emp) - 1):
    connect(hull_x_emp, hull_y_emp, i, i + 1, 'g--')
    connect(hull_x_emp, hull_y_emp, len(hull_emp) - 1, 0, 'g--')

    # Gausssian Convex hull and plotting
    hull_gaus = convex_hull_graham(points_gaus)
    hull_x_gaus = []
    hull_y_gaus = []

for pair in hull_gaus:
    hull_x_gaus.append(pair[0])
    hull_y_gaus.append(pair[1])

for i in range(0, len(hull_gaus) - 1):
    connect(hull_x_gaus, hull_y_gaus, i, i + 1, 'r--')
    connect(hull_x_gaus, hull_y_gaus, len(hull_gaus) - 1, 0, 'r--' )



    # Non intersecting circle
hull_inter = convex_hull_graham(points_intersecting)
hull_x_inter = []
hull_y_inter = []


for pair in hull_inter:
    hull_x_inter.append(pair[0])
    hull_y_inter.append(pair[1])

for i in range(0, len(hull_inter) - 1):
    connect(hull_x_inter, hull_y_inter, i, i + 1, 'r--')
    connect(hull_x_inter, hull_y_inter, len(hull_inter) - 1, 0, 'r--')

ax = plt.gca()

    # Empirical circle
circle_emp = []
circle_emp = get_hull_center(hull_emp, 0)
new_circle_emp = plt.Circle((circle_emp[0][0], circle_emp[0][1]), radius=circle_emp[1], label='Empirical Circle')
ax.add_patch(new_circle_emp)

    # Gaussian Circle
circle_gaus = []
circle_gaus = get_hull_center(hull_gaus, gaus_offset)
new_circle_gaus = plt.Circle((circle_gaus[0][0], circle_gaus[0][1]), radius=circle_gaus[1], color='y',label='Gaussian Circle')
ax.add_patch(new_circle_gaus)

    # Empirical circle
circle_inter = []
circle_inter = get_hull_center(hull_inter, intersection_offset)
new_circle_inter = plt.Circle((circle_inter[0][0], circle_inter[0][1]), radius=circle_inter[1], color='c',label='Non Intersecting Circle')
ax.add_patch(new_circle_inter)
plt.axis('scaled')

    # finding intersecting circles
print("the empiricle circle, and the gaussian circle" , if_circles_intersect(circle_emp, circle_gaus))
print("the empiricle circle, and the non-intersecting circle" , if_circles_intersect(circle_emp, circle_inter))

legend = ax.legend(lo5c='upper left', shadow=True, fontsize='large')
plt.show()